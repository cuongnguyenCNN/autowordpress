import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { SocialAccount } from "../types/socialaccount";
import { supabase } from "../lib/supabaseClient";
import { useUser } from "./userscontext";

// Interface m√¥ t·∫£ d·ªØ li·ªáu t√†i kho·∫£n m·∫°ng x√£ h·ªôi
// Interface cho context
interface SocialAccountContextProps {
  socialAccounts: SocialAccount[];
  loading: boolean;
  fetchSocialAccount: (userId: string) => Promise<void>;
  addSocialAccount: (account: SocialAccount) => Promise<SocialAccount[]>;
  removeSocialAccount: (id: string) => Promise<void>;
  updateSocialAccount: (
    id: string,
    data: Partial<SocialAccount>
  ) => Promise<void>;
}

// T·∫°o context
const SocialAccountContext = createContext<
  SocialAccountContextProps | undefined
>(undefined);

// Supabase client (c√≥ th·ªÉ thay b·∫±ng API c·ªßa b·∫°n)

// Provider component
export const SocialAccountProvider = ({
  children,
}: {
  children: ReactNode;
}) => {
  const [socialAccounts, setSocialAccounts] = useState<SocialAccount[]>([]);
  const [loading, setLoading] = useState(false);
  const { user } = useUser();

  // ‚úÖ Fetch danh s√°ch t√†i kho·∫£n theo user_id
  const fetchSocialAccount = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("social_accounts")
      .select("*")
      .eq("user_id", user?.id);

    if (error) console.error("Fetch error:", error);
    else setSocialAccounts(data || []);

    setLoading(false);
  };

  const addSocialAccount = async (account: SocialAccount) => {
    console.log("üì¶ addSocialAccount() called with:", account);

    const { data, error } = await supabase
      .from("social_accounts")
      .upsert([account], { onConflict: "user_id, provider" })
      .select();

    if (error) {
      console.error("‚ùå Supabase Add error:", error);
      throw error; // ‚ö†Ô∏è C·ª±c k·ª≥ quan tr·ªçng ƒë·ªÉ h√†m g·ªçi catch ƒë∆∞·ª£c
    }

    console.log("‚úÖ Supabase Add success:", data);
    setSocialAccounts((prev) => [...prev, ...(data || [])]);
    return data; // ‚ö†Ô∏è B·∫Øt bu·ªôc c√≥ return ƒë·ªÉ ch·ªó g·ªçi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
  };

  // ‚úÖ X√≥a t√†i kho·∫£n theo id
  const removeSocialAccount = async (id: string) => {
    const { error } = await supabase
      .from("social_accounts")
      .delete()
      .eq("id", id);
    if (error) console.error("Remove error:", error);
    else setSocialAccounts((prev) => prev.filter((a) => a.id !== id));
  };

  // ‚úÖ C·∫≠p nh·∫≠t t√†i kho·∫£n
  const updateSocialAccount = async (
    id: string,
    data: Partial<SocialAccount>
  ) => {
    const { data: updated, error } = await supabase
      .from("social_accounts")
      .update(data)
      .eq("id", id)
      .select();

    if (error) console.error("Update error:", error);
    else
      setSocialAccounts((prev) =>
        prev.map((a) => (a.id === id ? { ...a, ...updated?.[0] } : a))
      );
  };

  useEffect(() => {
    if (user?.id) {
      fetchSocialAccount(); // s·∫Ω ch·ªâ ch·∫°y sau khi user c√≥ ID
    }
  }, [user?.id]);
  return (
    <SocialAccountContext.Provider
      value={{
        socialAccounts,
        loading,
        fetchSocialAccount,
        addSocialAccount,
        removeSocialAccount,
        updateSocialAccount,
      }}
    >
      {children}
    </SocialAccountContext.Provider>
  );
};

// ‚úÖ Custom hook d√πng trong component
export const useSocialAccounts = () => {
  const context = useContext(SocialAccountContext);
  if (!context) {
    throw new Error(
      "useSocialAccounts must be used within a SocialAccountProvider"
    );
  }
  return context;
};
